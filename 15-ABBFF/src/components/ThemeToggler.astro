<button aria-label="Theme toggler">
	<svg width="25px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
		<path
			class="sun"
			d="M361.5 1.2c5 2.1 8.6 6.6 9.6 11.9L391 121l107.9 19.8c5.3 1 9.8 4.6 11.9 9.6s1.5 10.7-1.6 15.2L446.9 256l62.3 90.3c3.1 4.5 3.7 10.2 1.6 15.2s-6.6 8.6-11.9 9.6L391 391 371.1 498.9c-1 5.3-4.6 9.8-9.6 11.9s-10.7 1.5-15.2-1.6L256 446.9l-90.3 62.3c-4.5 3.1-10.2 3.7-15.2 1.6s-8.6-6.6-9.6-11.9L121 391 13.1 371.1c-5.3-1-9.8-4.6-11.9-9.6s-1.5-10.7 1.6-15.2L65.1 256 2.8 165.7c-3.1-4.5-3.7-10.2-1.6-15.2s6.6-8.6 11.9-9.6L121 121 140.9 13.1c1-5.3 4.6-9.8 9.6-11.9s10.7-1.5 15.2 1.6L256 65.1 346.3 2.8c4.5-3.1 10.2-3.7 15.2-1.6zM160 256a96 96 0 1 1 192 0 96 96 0 1 1 -192 0zm224 0a128 128 0 1 0 -256 0 128 128 0 1 0 256 0z"
		></path>
		<path
			class="moon"
			d="M375.7 19.7c-1.5-8-6.9-14.7-14.4-17.8s-16.1-2.2-22.8 2.4L256 61.1 173.5 4.2c-6.7-4.6-15.3-5.5-22.8-2.4s-12.9 9.8-14.4 17.8l-18.1 98.5L19.7 136.3c-8 1.5-14.7 6.9-17.8 14.4s-2.2 16.1 2.4 22.8L61.1 256 4.2 338.5c-4.6 6.7-5.5 15.3-2.4 22.8s9.8 13 17.8 14.4l98.5 18.1 18.1 98.5c1.5 8 6.9 14.7 14.4 17.8s16.1 2.2 22.8-2.4L256 450.9l82.5 56.9c6.7 4.6 15.3 5.5 22.8 2.4s12.9-9.8 14.4-17.8l18.1-98.5 98.5-18.1c8-1.5 14.7-6.9 17.8-14.4s2.2-16.1-2.4-22.8L450.9 256l56.9-82.5c4.6-6.7 5.5-15.3 2.4-22.8s-9.8-12.9-17.8-14.4l-98.5-18.1L375.7 19.7zM269.6 110l65.6-45.2 14.4 78.3c1.8 9.8 9.5 17.5 19.3 19.3l78.3 14.4L402 242.4c-5.7 8.2-5.7 19 0 27.2l45.2 65.6-78.3 14.4c-9.8 1.8-17.5 9.5-19.3 19.3l-14.4 78.3L269.6 402c-8.2-5.7-19-5.7-27.2 0l-65.6 45.2-14.4-78.3c-1.8-9.8-9.5-17.5-19.3-19.3L64.8 335.2 110 269.6c5.7-8.2 5.7-19 0-27.2L64.8 176.8l78.3-14.4c9.8-1.8 17.5-9.5 19.3-19.3l14.4-78.3L242.4 110c8.2 5.7 19 5.7 27.2 0zM256 368a112 112 0 1 0 0-224 112 112 0 1 0 0 224zM192 256a64 64 0 1 1 128 0 64 64 0 1 1 -128 0z"
		></path>
	</svg>
</button>

<style>
	button {
		cursor: pointer;
		border-radius: 10px;
		border: 0;
		padding: 5px 10px;
		transition: all 0.2s ease-in-out;
	}

	button:hover {
		transform: scale(0.9);
	}

	button:active {
		transform: scale(1);
	}

	.sun {
		fill: transparent;
	}

	:global(.dark) .sun {
		fill: black;
	}

	:global(.dark) .moon {
		fill: transparent;
	}
</style>

<script>
	enum THEME_DICTIONARY {
		LIGHT_THEME = "LIGHT",
		DARK_THEME = "DARK"
	}
	const DARK_THEME_CLASS = "dark";
	const COLOR_MODE = "COLOR_MODE";

	const toggle = document.querySelector("button")!;
	const rootElement = document.documentElement;

	const colorMode = getColorMode();
	setInitialColor(colorMode);

	if (toggle)
		toggle.addEventListener("click", () => {
			rootElement.classList.toggle(DARK_THEME_CLASS);
			const colorMode = rootElement.classList.contains(DARK_THEME_CLASS)
				? THEME_DICTIONARY.DARK_THEME
				: THEME_DICTIONARY.LIGHT_THEME;
			window.localStorage.setItem(COLOR_MODE, colorMode);
		});

	function getColorMode(): THEME_DICTIONARY {
		const savedColor = getColorStorage();
		if (savedColor) return savedColor;
		if (getUserColorSchema()) return THEME_DICTIONARY.DARK_THEME;
		return THEME_DICTIONARY.LIGHT_THEME;
	}

	function getColorStorage(): THEME_DICTIONARY | null {
		return window.localStorage.getItem(
			COLOR_MODE
		) as THEME_DICTIONARY | null;
	}

	function getUserColorSchema(): boolean {
		return window.matchMedia("prefers-color-scheme: dark").matches;
	}

	function setInitialColor(theme: THEME_DICTIONARY) {
		theme === THEME_DICTIONARY.LIGHT_THEME
			? rootElement.classList.remove(DARK_THEME_CLASS)
			: rootElement.classList.add(DARK_THEME_CLASS);
	}
</script>
